\ProvidesPackage{luaxml}[{{DATE}} LuaXML package]

\RequirePackage{luacode}

% ToDo: add support for use of  transformation rules for other XML syntaxes -- using LaTeX command?


\begin{luacode*}
luaxml_sty = require "luaxml-sty"
\end{luacode*}


\ExplSyntaxOn

\bool_new:N\l_luaxml_verbatim
\tl_new:N \l_luaxml_transformer

\keys_define:nn{luaxml}{
  verbatim .bool_set:N = \l_luaxml_verbatim ,
  verbatim .initial:n = false,
  unknown .code:n = \tl_set_eq:NN\l_luaxml_transformer\l_keys_key_str,
  transformer .tl_set:N = \l_luaxml_transformer
}


% select current transformer object
\NewDocumentCommand\LXMLUseTransformer{m}{
  \directlua{
luaxml_sty.current.transformation = "#1",
}}

% declare new transformer object
\NewDocumentCommand\LXMLDeclareTransformer{m}{
  \directlua{
    luaxml_sty.transformations["#1"] = luaxml_sty.packages.transform.new()
  }
}

% add transformer rule
% #1 options (verbatim, transformer, unknown key = transformer)
% #2 CSS selector 
% #3 transformer rule
\NewDocumentCommand\LXMLRule{O{} m +v}{
  \group_begin:
  \keys_set:nn {luaxml} { #1 }
  \directlua{luaxml_sty.current.parameters = {}}
  \bool_if:NT \l_luaxml_verbatim {\directlua{luaxml_sty.current.parameters.verbatim = true}}
  \group_end:
  \directlua{
    luaxml_sty.add_rule("\l_luaxml_transformer", "#2", "\luaescapestring{#3}")
    %luaxml_sty.add_rule("#1", "#2", "#3")
  }
}


% \LXMLSnippet* - parse using XML parser
% \LXMLSnippet  - parse using HTML parser
% #2 transformer object name -- empty = default
% #3 XML string
\NewDocumentCommand\LXMLSnippet{s O{} m}{
  \IfBooleanTF{#1}{
    \directlua{luaxml_sty.set_html()}
  }{
    \directlua{luaxml_sty.set_xml()}
  }
  \directlua{
    luaxml_sty.parse_snippet("\luaescapestring{#2}", [[\detokenize{#3}]])
  }
}


\NewDocumentCommand\LXMLInputFile{s O{} m}{
  \IfBooleanTF{#1}{
    \directlua{luaxml_sty.set_html()}
  }{
    \directlua{luaxml_sty.set_xml()}
  }
  \directlua{
    luaxml_sty.parse_file("\luaescapestring{#2}", "\luaescapestring{#3}")
  }
}

\NewDocumentEnvironment{LXMLCode}{O{} }{
  \directlua{
    luaxml_sty.set_xml()
    luaxml_sty.register_verbatim("LXMLCode")
    %luaxml_sty.parse_snippet("\luaescapestring{#1}", [[\detokenize{#2}]])
  }
}{}

%\NewDocumentEnvironment{LXMLCode*}{}{
% I couldn't process the first line in the environment using the Lua callback with \NewDocumentEnvironment,
% so \newenvironment is used instead.
\newenvironment{LXMLCode*}{
  \directlua{
    luaxml_sty.set_html()
    luaxml_sty.register_verbatim("LXMLCode*")
    %luaxml_sty.parse_snippet("\luaescapestring{#1}", [[\detokenize{#2}]])
  }
  %\tl_set:Nn\l_luaxml_transformer{#1}
}{
  \directlua{
    print(table.concat(luaxml_sty.verb_table, ":"))
    % workaround for \n, which cannot be used here
    print(table.concat(luaxml_sty.verb_table, string.char(13)))
    luaxml_sty.parse_snippet("\l_luaxml_transformer", table.concat(luaxml_sty.verb_table, string.char(13)))
  }
}


\ExplSyntaxOff
\endinput
